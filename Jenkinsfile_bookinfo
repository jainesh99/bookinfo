def label = "worker-${UUID.randomUUID().toString()}"

podTemplate(label: label, containers: [
  containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.8.8', command: 'cat', ttyEnabled: true),
],
volumes: [
 hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')]
) {
  node(label) {
    def myRepo = checkout scm
    def gitCommit = myRepo.GIT_COMMIT
    def gitBranch = myRepo.GIT_BRANCH
    def shortGitCommit = "${gitCommit[0..10]}"
    def previousGitCommit = sh(script: "git rev-parse ${gitCommit}~", returnStdout: true)

    def harborHostName = "ec2-18-202-213-146.eu-west-1.compute.amazonaws.com"
    def project = "productpage"
    def containerName = "productpagecontainer"
    def version = "1.0"

    stage('Create Namespace') {
      container('docker') {
          sh "kubectl apply -f platform/kube/bookinfo_namespace.yaml"
        }
      }

    stage('Create Services And Deployments') {
      container('kubectl') {
        sh "kubectl apply -f platform/kube/bookinfo.yaml"
      }
    }

    stage('Create Virtual Service') {
      container('kubectl') {
        sh "kubectl apply -f networking/virtual-service-all-v1.yaml"
      }
    }

    stage('Create Destination Routes') {
      container('kubectl') {
        sh "kubectl apply -f networking/destination-rule-all.yaml"
      }
    }

    stage('Create Gateway') {
      container('kubectl') {
        sh "kubectl apply -f networking/bookinfo-gateway.yaml"
      }
    }

  }
}